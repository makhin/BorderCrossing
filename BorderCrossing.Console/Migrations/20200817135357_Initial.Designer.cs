// <auto-generated />
using System;
using BorderCrossing.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace BorderCrossing.Console.Migrations
{
    [DbContext(typeof(CountryDbContext))]
    [Migration("20200817135357_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("BorderCrossing.DbContext.CheckPoint", b =>
                {
                    b.Property<int>("CheckPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Geometry>("Point")
                        .HasColumnType("geometry");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("TEXT");

                    b.HasKey("CheckPointId");

                    b.HasIndex("RequestId");

                    b.ToTable("CheckPoints");
                });

            modelBuilder.Entity("BorderCrossing.DbContext.Country", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Geometry>("Geom")
                        .HasColumnType("geometry");

                    b.Property<short>("Region")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BorderCrossing.DbContext.LocationHistoryFile", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("File")
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.ToTable("LocationHistoryFiles");
                });

            modelBuilder.Entity("BorderCrossing.DbContext.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("BorderCrossing.DbContext.CheckPoint", b =>
                {
                    b.HasOne("BorderCrossing.DbContext.Request", "Request")
                        .WithMany("CheckPoints")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("BorderCrossing.DbContext.LocationHistoryFile", b =>
                {
                    b.HasOne("BorderCrossing.DbContext.Request", "Request")
                        .WithOne("File")
                        .HasForeignKey("BorderCrossing.DbContext.LocationHistoryFile", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
